#!/bin/bash

########################### Check if there's a .git directory ###########################
git rev-parse --show-toplevel &> /dev/null
if [[ $? != 0 ]]
then
	echo -ne "This project does not have a .git directory.\n"
	read -resp $'Would you like to initialize the current directory as a git repo? [y/N]\n' answer
	if [[ $answer == y || $answer == yes || $answer == Yes ]]
	then
		git init
	else
		exit 3
	fi
fi

########################### Variable Declarations ###########################
git_root=$(git rev-parse --show-toplevel)

name=${git_root##*/}

origin_service=$(grep -A 1 -m 1 'remote "origin"' $git_root/.git/config | grep url | xargs \
	| sed 's/url = git@//g' | grep -o 'git.\{3\}')

upstream=$(cat $git_root/.git/config | grep -A 1 'remote "upstream"' | grep url | xargs | sed 's/url = //g')


########################### Function Declarations ###########################
gh_pass() {
	read -resp $'Tell me your secrets:\n' kpw
	echo $kpw | keepassxc-cli clip $HOME/.kpxc/kpxc.kdbx GitHub 5 &> /dev/null &
	sleep 0.5s
	ghpw=$(xclip -o -selection clipboard)
	echo $ghpw
	unset ghpw
}

create_gh() {
	ghpw=$(gh_pass)
	curl -X POST https://api.github.com/user/repos -u scbrickley:$ghpw -d "{\"name\": \"$name\"}" &> /dev/null
	unset ghpw
}


publish() {
	if [[ $1 == github ]]
	then
		create_gh
	fi
	git remote add origin git@"$1".com:scbrickley/"$name".git
	git add .
	git commit -m "Initial commit"
	git push -u origin master
}

mirror() {
	if [[ $1 == "github" ]]
	then
		create_gh
	fi
	git remote add mirror git@"$1".com:scbrickley/"$name".git
	git add $git_root/*
	git commit -m "Mirror to $mirror_service"
	git push -u mirror master
	git push -u origin master
}	

is_published() {
	count=$(git remote -v | grep -c origin)
	[[ $count -gt 0 ]]
}

is_mirrored() {
	count=$(git remote -v | grep -v "origin" | grep -vc "upstream")
	[[ $count != 0 ]]
}

list_remotes() {
	echo "This repository has the following remotes:"
	remotes=$(git remote -v)
	lines='\n\t'
	IFS=$'\n'
	for line in $remotes
	do
		lines+=${line% \(*}
		lines+='\n\t'
	done
	lines=$(echo -e $lines | uniq)
	for line in $lines
	do
		echo $line
	done
}

has_upstream() {
	count=$(git remote -v | grep -c upstream)
	[[ $count -gt 0 ]]
}


########################### Argument parsing ###########################
while getopts ":lubms:p:" opt
do
	case ${opt} in
		l )
			list_remotes
			;;
		b )
			is_published
			if [[ $? == 0 ]]
			then
				echo This repo is published to $origin_service
			else
				echo This repo is not published yet
			fi
			;;
		u )
			has_upstream
			if [[ $? == 0 ]]
			then
				echo -e "This repo is upstreamed to: \n\t$upstream"
			else
				echo No upstream
			fi
			;;
		s )
			git add $git_root/*
			git commit -m "$OPTARG"
			
			is_published
			if [[ $? != 0 ]]
			then
				echo "This repo is not yet published. Please publish before attempting to save."
				exit 6
			fi

			git push origin master
			
			is_mirrored
			if [[ $? == 0 ]]
			then
				git push mirror master
			fi
			;;
		p )
			is_published
			if [[ $? == 0 ]]
			then
				echo "This repo is already published to $origin_service"
				exit 1
			fi

			if [[ $OPTARG != "gitlab" && $OPTARG != "github" ]]
			then
				echo "Error: argument to p must either be \"gitlab\" or \"github\""
				exit 2
			fi

			echo "Publishing to git@$OPTARG.com:scbrickley/$name.git"
			publish $OPTARG
			;;
		m )
			# Throw error and exit if not published
			is_published
			if [[ $? != 0 ]]
			then
				echo "This repo has not yet been published. Please publish before attempting to mirror."
				exit 4
			fi

			is_mirrored
			if [[ $? == 0 ]]
			then
				echo "This repo has already been mirrored"
				exit 5
			fi

			if [[ $origin_service == "gitlab" ]]
			then
				mirror_service="github"
			elif [[ $origin_service == "github" ]]
			then
				mirror_service="gitlab"
			else
				echo "Origin service not recognized. Should be 'gitlab' or 'github'. Uncertain where to mirror."
				exit 6
			fi

			mirror $mirror_service
			;;
		\? )
			echo "Invalid option: $OPTARG" 1>&2
			;;
		: )
			echo "$OPTARG requires an argument" 1>&2
			;;
	esac
done
