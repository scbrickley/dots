#!/bin/bash

git_init() {
	git rev-parse --show-toplevel &> /dev/null
	if [[ $? != 0 ]]; then
		find */.git &> /dev/null
		if [[ $? != 0 ]]; then
			echo -ne "This project does not have a .git directory.\n"
			read -resp $'Would you like to make this directory a git repo? [y/N]\n' \
				answer
			if [[ $answer == y || $answer == yes || $answer == Yes ]]; then
				git init
			else
				exit 0
			fi
		else
			echo "This directory contains other git repositories."
			echo "Nesting repos is not allowed. Aborting."
			exit 1
		fi
	fi
	declare -g git_root=$(git rev-parse --show-toplevel)

	declare -g name=${git_root##*/}

	declare -g origin_service=$(grep -A 1 -m 1 'remote "origin"' \
		$git_root/.git/config | grep url | xargs \
		| sed 's/url = git@//g' | grep -o 'git.\{3\}')

	declare -g upstream=$(cat $git_root/.git/config | grep -A 1 \
		'remote "upstream"' | grep url | xargs \
		| sed 's/url = //g')
}

create_gh() {
	query='
		mutation {
			createRepository(input: {
				name: "'$name'"
				visibility: PUBLIC
			}) {
				repository {
					name
				}
			}
		}
	'
	query=${query//\"/\\\"} # escape all the double quotes
	query=${query//$'\n'/ } # force single line
	query=${query//$'\t'/ } # remove tab characters

	json='{"query": "'$query'"}'
	# echo "$json" <-- for debugging purposes

	curl -H 'Content-Type: application/json' \
			-H "Authorization: Bearer $(tok github)" \
			-X POST -d "$json" "https://api.github.com/graphql"
}

publish() {
	if [[ $1 == github ]]
	then
		create_gh
	fi
	git remote add origin git@"$1".com:scbrickley/"$name".git
	git add .
	git commit -m "Initial commit"
	git push -u origin master
}

mirror() {
	if [[ $1 == "github" ]]
	then
		create_gh
	fi
	git remote add mirror git@"$1".com:scbrickley/"$name".git
	git add $git_root/*
	git commit -m "Mirror to $mirror_service"
	git push -u mirror master
	git push -u origin master
}	

is_published() {
	count=$(git remote -v | grep -c origin)
	[[ $count -gt 0 ]]
}

is_mirrored() {
	count=$(git remote -v | grep -v "origin" | grep -vc "upstream")
	[[ $count != 0 ]]
}

list_remotes() {
	echo "This repository has the following remotes:"
	remotes=$(git remote -v)
	lines='\n\t'
	IFS=$'\n'
	for line in $remotes
	do
		lines+=${line% \(*}
		lines+='\n\t'
	done
	lines=$(echo -e $lines | uniq)
	for line in $lines
	do
		echo $line
	done
}

has_upstream() {
	count=$(git remote -v | grep -c upstream)
	[[ $count -gt 0 ]]
}

current_branch() {
	echo $(git rev-parse --abbrev-ref HEAD)
}


########################### Argument parsing ###########################
while getopts ":lubmrs:p:g:" opt
do
	case ${opt} in
		r )
			git_init
			current_branch
			;;
		l )
			git_init
			list_remotes
			;;
		b )
			git_init
			is_published
			if [[ $? == 0 ]]
			then
				echo This repo is published to $origin_service
			else
				echo This repo is not published yet
			fi
			;;
		u )
			git_init
			has_upstream
			if [[ $? == 0 ]]
			then
				echo -e "This repo is upstreamed to: \n\t$upstream"
			else
				echo No upstream
			fi
			;;
		s )
			git_init	
			git add $git_root
			git commit -m "$OPTARG"

			is_published
			if [[ $? != 0 ]]
			then
				echo "This repo is not yet published."
				echo "Please publish before attempting to save."
				exit 1
			fi

			git push origin $current_branch
			
			is_mirrored
			if [[ $? == 0 ]]
			then
				git push mirror $current_branch
			fi
			;;
		p )
			git_init
			is_published
			if [[ $? == 0 ]]
			then
				echo "This repo is already published to $origin_service"
				exit 1
			fi

			if [[ $OPTARG != "gitlab" && $OPTARG != "github" ]]
			then
				echo "Error: argument to p must either be \"gitlab\" or \"github\""
				exit 1
			fi

			echo Publishing to git@$OPTARG.com:scbrickley/"$name".git
			publish $OPTARG
			;;
		m )
			git_init
			is_published
			if [[ $? != 0 ]]
			then
				echo "This repo has not yet been published."
				echo "Please publish before attempting to mirror."
				exit 1
			fi

			is_mirrored
			if [[ $? == 0 ]]
			then
				echo "This repo has already been mirrored"
				exit 1
			fi

			if [[ $origin_service == "gitlab" ]]
			then
				mirror_service="github"
			elif [[ $origin_service == "github" ]]
			then
				mirror_service="gitlab"
			else
				echo "Origin service not recognized. Should be 'gitlab' or 'github'."
				echo "Uncertain where to mirror."
				exit 16
			fi

			mirror $mirror_service
			;;
		g )
			echo "Searching for a remote project named $OPTARG..."
			git clone git@gitlab.com:scbrickley/$OPTARG &> /dev/null
			if [[ $? != 0 ]]
			then
				echo "No project with the name $OPTARG found on GitLab."
				echo "Trying GitHub..."
				git clone git@github.com:scbrickley/$OPTARG &> /dev/null
				if [[ $? != 0 ]]
				then
					echo "Could not find a project with the name \"$OPTARG\"."
					exit 1
				fi
			fi
			;;
		\? )
			echo "Invalid option: $OPTARG" 1>&2
			exit 1
			;;
		: )
			echo "$OPTARG requires an argument" 1>&2
			exit 1
			;;
	esac
done
